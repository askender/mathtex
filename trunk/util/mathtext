#! /usr/bin/env python
# Mathtex command line utility
from mathtex.mathtex_main import Mathtex
from mathtex.fonts import BakomaFonts, StixFonts, UnicodeFonts
from optparse import OptionParser
from tempfile import mkstemp
import os

# Configure the command line argument parser
arg_parser = OptionParser()

# DPI option
arg_parser.add_option('-d', '--dpi', dest='dpi', type='int',
                      default=100, help='dpi to render the equation at')

# Fontset to use
arg_parser.add_option('-f', '--fontset', dest='fontset', type='choice',
                      choices=['bakoma', 'cm', 'stix', 'unicode'], default='cm',
                      help='fonts to render the equation with')

# Output format
arg_parser.add_option('-j', '--format', dest='format', default='auto',
                      help='file format to render the equation to')

# Unicode fonts to use
arg_parser.add_option('-u', '--unicode-fonts', dest='fontlist', default='',
                      help='unicode fonts to use, in the form of style=font,..., e.g. rm=times,sf=arial')

# Font size to use
arg_parser.add_option('-x', '--font-size', dest='fontsize', type='float',
                      default=12.0, help='base font size')

# Default font style to use
arg_parser.add_option('-s', '--default-style', dest='style',
                      type='choice', choices=['rm', 'it'], default='it',
                      help='default character style to use')



(options, args) = arg_parser.parse_args()

# Sanity checks
if options.fontset == 'unicode' and options.fontlist == '':
    arg_parser.error('font list required to use unicode fonts')
elif options.fontset != 'unicode' and options.fontlist != '':
    arg_parser.error('-u is only available for unicode fonts')

# Create the fontset
if options.fontset == 'bakoma' or options.fontset == 'cm':
    fonts = BakomaFonts()
elif options.fontset == 'stix':
    fonts = StixFonts()
elif options.fontset == 'unicode':
    # Need to parse the font list
    flatlist = options.fontlist.replace('=', ',').split(',')
    fonts = UnicodeFonts(**dict(zip(flatlist[::2], flatlist[1::2])))

# If no expression was provided, but a filename was, read from stdin
if len(args) == 1:
    Mathtex(raw_input(), fonts, options.fontsize, options.dpi,
            options.style).save(args[0], options.format)
# Both filename and expression
elif len(args) == 2:
    Mathtex(args[1], fonts, options.fontsize, options.dpi,
            options.style).save(args[0], options.format)
# Neither, enter persistent mode
else:
    while True:
        expr = raw_input()

        if expr == '':
            break

        # Create a temp file
        fd, name = mkstemp(suffix='.mathtex.' + options.format)
        os.close(fd)

        # Eval the expression
        Mathtex(expr, fonts, options.fontsize, options.dpi,
                options.style).save(name, options.format)

        print name